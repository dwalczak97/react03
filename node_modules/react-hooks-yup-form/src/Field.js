import React, { useContext, useEffect } from "react";
import PropTypes from "prop-types";

import FormContext from "./FormContext";
import Input from "./Inputs/Input";
import { yupSchemaType } from "types";

const isPlainHtlmInput = function(obj) {
  return Object.prototype.toString.call(obj) === "[object String]";
};

// validate (if specified) should return a plain error string message
function Field({
  name,
  value,
  preserveValuesOnReset,
  component: Component,
  validate,
  yupSchema,
  renderChildren,
  onChange,
  children,
  ...fieldRest
}) {
  if (!name) {
    console.log(`Name is not provided for a field`);
    return;
  }

  const {
    registerField,
    unregisterField,
    getField,
    handleFieldChange,
    handleFieldBlur
  } = useContext(FormContext);

  const field = getField(name) || {};

  const handleChange = e => {
    handleFieldChange(name, e.target.value);
    onChange && onChange(e.target.value);
  };

  const handleBlur = e => {
    handleFieldBlur(e.target.name, e.target.value);
  };

  useEffect(() => {
    registerField(name, { value, preserveValuesOnReset, validate, yupSchema });
    return () => unregisterField(name);
  }, []);

  let elementProps = {
    ...fieldRest,
    name: name,
    value: field.value,
    onChange: handleChange,
    onBlur: handleBlur
  };

  // if not one of standard plain HTML input
  if (!isPlainHtlmInput(Component)) {
    elementProps = {
      ...elementProps,
      error: field.error,
      touched: field.touched
    };
  }

  if (renderChildren || React.Children.count(children)) {
    return (
      <Component {...elementProps}>{renderChildren || children}</Component>
    );
  }
  return <Component {...elementProps} />;
}

Field.propTypes = {
  name: PropTypes.string.isRequired,
  value: PropTypes.string.isRequired,
  preserveValuesOnReset: PropTypes.bool.isRequired,
  component: PropTypes.oneOfType([
    PropTypes.func,
    PropTypes.element,
    PropTypes.oneOf(["input", "select", "textArea"])
  ]).isRequired,
  validate: PropTypes.func,
  yupSchema: yupSchemaType,
  renderChildren: PropTypes.element,
  onChange: PropTypes.func
};

Field.defaultProps = {
  value: "",
  preserveValuesOnReset: false,
  component: Input,
  validate: () => {}
};

export default Field;
